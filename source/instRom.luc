module instRom (
    input address[8],
    output inst[8]
  ) {

  always {
    inst = Inst.NOP;
    
    case (address) {
      0: inst = c{1, 0, 0, 0, 0, 0, 0, 1};      // Immediate push 1 to stack {1}
      1: inst = Inst.NOP;
      2: inst = c{1, 0, 0, 0, 0, 0, 1, 0};      // Immediate push 2 to stack {1, 2}
      3: inst = Inst.NOP;
      4: inst = c{1, 0, 0, 0, 0, 0, 1, 1};      // Immediate push 3 to stack {1, 2, 3}
      5: inst = c{Inst.ADDSP, 0, 0, 0, 1};      // 3 + 1 = 4 {1, 2, 4}
      6: inst = c{1, 0, 0, 0, 0, 0, 0, 1};      // Immediate push 1 to stack for writing to IO Port {1, 2, 4, 1} (HI7)
      7: inst = c{1, 0, 0, 0, 0, 0, 0, 0};      // Immediate append 128 to stack for writing to IO Port {1, 2, 4, 128} (LOW7)
      8: inst = Inst.STORE;                     // Write 4 to memory mapped IO {1, 2}
      9: inst = Inst.BRK; 

/*            
      // Store last pushed into first pushed
      // Test STORESP
      0: inst = c{1, 0, 0, 0, 0, 0, 0, 0};      // Immediate push 0 to stack {0}
      1: inst = Inst.NOP;
      2: inst = c{1, 1, 1, 1, 1, 1, 1, 1};      // Immediate push 127 to stack {0, 127}
      3: inst = c{Inst.STORESP, 1, 0, 0, 0, 0}; // Pop 127 and write to SP position 0 {127}
      4: inst = c{1, 0, 0, 0, 0, 0, 0, 1};      // Immediate push 1 to stack for writing to IO Port {127, 1} (HI7)
      5: inst = c{1, 0, 0, 0, 0, 0, 0, 0};      // Immediate append 128 to stack for writing to IO Port {127, 128} (LOW7)
      6: inst = Inst.STORE;                     // Write 127 to memory mapped IO {}
      7: inst = Inst.BRK; 
    */
            
/*
      // Push 1s, Push 0s, then push SP - 1; Write result
      // Test LOADSP
      0: inst = c{1, 1, 1, 1, 1, 1, 1, 1};      // Immediate push 127 to stack {127}
      1: inst = Inst.NOP;
      2: inst = c{1, 0, 0, 0, 0, 0, 0, 0};      // Immediate push 0 to stack {127, 0}
      3: inst = c{Inst.LOADSP, 1, 0, 0, 0, 1};  // Load first stack value to stack {127, 0, 127}
      4: inst = c{1, 0, 0, 0, 0, 0, 0, 1};      // Immediate push 1 to stack for writing to IO Port {127, 0, 127, 1} (HI7)
      5: inst = c{1, 0, 0, 0, 0, 0, 0, 0};      // Immediate append 128 to stack for writing to IO Port {127, 0, 127, 128} (LOW7)
      6: inst = Inst.STORE;                     // Write 127 to memory mapped IO {127, 0}
      7: inst = Inst.BRK;                       // Stop {127, 0}
    */      
/*    
      // Push PC end of program to stack
      // Push something to make sure it does not execute
      // POPPC test
      0: inst = c{1, 0, 0, 0, 0, 1, 1, 0};      // Immediate push 6 to stack {6}
      1: inst = Inst.POPPC;
      2: inst = c{1, 0, 0, 0, 0, 0, 0, 0};      // Immediate push 0 to stack {6, 0}
      3: inst = Inst.NOP;
      4: inst = c{1, 0, 0, 0, 0, 0, 0, 0};      // Immediate push x to stack {6, 0, 0}
      5: inst = Inst.NOP;
      6: inst = Inst.BRK;                       // Stop {}
    */
/*
      // Push a data value, then POPSP; SP should be at popped value
      // POPSP Test
      0: inst = c{1, 0, 0, 0, 0, 1, 0, 1};      // Immediate push 5 to stack {5}
      1: inst = Inst.POPSP;                     // Pop 5 off stack and set stack pointer to 5
      2: inst = Inst.BRK;                       // Stop {}
    */
/*    
      // Push some data, then push SP, sum, then write out sum
      // PUSHSP Test
      0: inst = c{1, 0, 0, 0, 0, 0, 0, 0};      // Immediate push 0 to stack {1}
      1: inst = Inst.NOP;                       // Clear the immediate flag
      2: inst = c{1, 0, 0, 0, 0, 0, 0, 1};      // Immediate push 1 to stack {0, 1}
      3: inst = Inst.PUSHSP;                    // Push stack pointer of 2 to stack {0, 1, 2}
      4: inst = Inst.ADD;                       // 1 + 2 = 3 {0, 3}
      5: inst = c{1, 0, 0, 0, 0, 0, 0, 1};      // Immediate push 1 to stack for writing to IO Port {0, 3, 1} (HI7)
      6: inst = c{1, 0, 0, 0, 0, 0, 0, 0};      // Immediate append 128 to stack for writing to IO Port {0, 3, 128} (LOW7)
      7: inst = Inst.STORE;                     // Write SUM of 3 to memory mapped IO {0}
      8: inst = Inst.BRK;                       // Stop {0}
    */
/*
      // Add two numbers, store in RAM, fetch, then put to IO port
      0: inst = c{1, 0, 0, 0, 0, 0, 0, 1};      // Immediate push 1 to stack {1}
      1: inst = Inst.NOP;                       // Clear the immediate flag
      2: inst = c{1, 0, 0, 0, 0, 0, 0, 1};      // Immediate push 1 to stack {1, 1}
      3: inst = Inst.ADD;                       // 1 + 1 = 2; 2 should be on the stack {2}
      4: inst = c{1, 0, 0, 0, 0, 1, 0, 0};      // Immediate push 1 to stack for writing to RAM address (byte) 4 {2, 4}
      5: inst = Inst.STORE;                     // Store sum to RAM address 4 {}
      6: inst = c{1, 0, 0, 0, 0, 1, 0, 0};      // Immediate push 4 to stack for reading from RAM address (byte) 4 {4}
      7: inst = Inst.LOAD;                      // Load sum from RAM address 4 {2}
      8: inst = c{1, 0, 0, 0, 0, 0, 0, 1};      // Immediate push 1 to stack for writing to IO Port {2, 1} (HI7)
      9: inst = c{1, 0, 0, 0, 0, 0, 0, 0};      // Immediate append 128 to stack for writing to IO Port {2, 128} (LOW7)
      10: inst = Inst.STORE;                     // Write SUM to memory mapped IO {}
      11: inst = Inst.BRK;                       // Stop {}
    */      
/*
      // Test sign-extended push immediate to stack
      0: inst = c{1, 1, 0, 0, 0, 0, 0, 1};      // Immediate push 7f to stack
      1: inst = c{1, 0, 1, 0, 1, 0, 1, 0};      // Immediate push to append to existing 32-bit data val
      2: inst = Inst.NOP;                       // Clear the immediate flag
      3: inst = c{1, 0, 0, 0, 0, 0, 0, 0};      // Push a nothing address on the stack (data already there)
      4: inst = Inst.STORE;                     // Store to memory
      5: inst = Inst.BRK;                       // Stop
    */
            
/*
      // Test out immediate push and store fetch    
      0: inst = c{1, 0, 0, 0, 1, 1, 1, 1};      // Immediate push f to stack
      1: inst = Inst.NOP;                       // Clear the immediate flag
      2: inst = c{1, 0, 0, 0, 0, 0, 0, 0};      // Push a nothing address on the stack (data already there)
      3: inst = Inst.STORE;                     // Store to memory
      4: inst = Inst.BRK;                       // Stop
*/

/*      
      // 1 + 1 + 1 = 3; Multiple addition
      0: inst = c{1, 0, 0, 0, 0, 0, 0, 1};      // Immediate push 1 to stack
      1: inst = Inst.NOP;                       // Clear the immediate flag
      2: inst = c{1, 0, 0, 0, 0, 0, 0, 1};      // Immediate push 1 to stack
      3: inst = Inst.ADD;                       // 1 + 1 = 2; 2 should be on the stack
      4: inst = c{1, 0, 0, 0, 0, 0, 0, 1};      // Immediate push 1 to stack
      5: inst = Inst.ADD;                       // 2 + 1 = 3; 3 should be on the stack
      6: inst = c{1, 0, 0, 0, 0, 0, 0, 0};      // Push a nothing address on the stack (data already there)
      7: inst = Inst.STORE;                     // Store to memory
      8: inst = Inst.BRK;                       // Stop
    */

/*        
      // (1 + 1) | 4 = 6; Addition, then OR
      0: inst = c{1, 0, 0, 0, 0, 0, 0, 1};      // Immediate push 1 to stack
      1: inst = Inst.NOP;                       // Clear the immediate flag
      2: inst = c{1, 0, 0, 0, 0, 0, 0, 1};      // Immediate push 1 to stack
      3: inst = Inst.ADD;                       // 1 + 1 = 2; 2 should be on the stack
      4: inst = c{1, 0, 0, 0, 0, 1, 0, 0};      // Immediate push 4 to stack
      5: inst = Inst.OR;                        // 2 | 4 = 6; 6 should be on the stack
      6: inst = c{1, 0, 0, 0, 0, 0, 0, 0};      // Push a nothing address on the stack (data already there)
      7: inst = Inst.STORE;                     // Store to memory
      8: inst = Inst.BRK;                       // Stop
    */        
        
/*        
      // 1 + 1 = 2; Simple addition
      0: inst = c{1, 0, 0, 0, 0, 0, 0, 1};      // Immediate push 1 to stack
      1: inst = Inst.NOP;                       // Clear the immediate flag
      2: inst = c{1, 0, 0, 0, 0, 0, 0, 1};      // Immediate push 1 to stack
      3: inst = Inst.ADD;                       // 1 + 1 = 2; 2 should be on the stack
      4: inst = c{1, 0, 0, 0, 0, 0, 0, 0};      // Push a nothing address on the stack (data already there)
      5: inst = Inst.STORE;                     // Store to memory
      6: inst = Inst.BRK;                       // Stop
      */
    }
  }
}
